name: Nightly Tests

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual trigger

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  nightly-test:
    name: Test on Rust Nightly
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail if nightly is broken
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

      - name: Run clippy (nightly lints)
        run: cargo clippy --all-targets --all-features

  minimal-versions:
    name: Test with Minimal Dependency Versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install Rust nightly (for -Z minimal-versions)
        uses: dtolnay/rust-toolchain@nightly

      - name: Update to minimal versions
        run: cargo +nightly update -Z minimal-versions

      - name: Build with minimal versions
        run: cargo +stable build --verbose

      - name: Test with minimal versions
        run: cargo +stable test --verbose

  cross-compile:
    name: Cross-compilation Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - wasm32-unknown-unknown
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross || true

      - name: Build for target
        run: |
          if [ "${{ matrix.target }}" = "wasm32-unknown-unknown" ]; then
            # WASM target - check if it compiles
            cargo build --target ${{ matrix.target }} --no-default-features || true
          else
            # Other targets
            cargo build --target ${{ matrix.target }} --verbose || true
          fi
        continue-on-error: true

